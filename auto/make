
# Copyright (C) Igor Sysoev
# Copyright (C) NGINX, Inc.

. auto/deps

$echo "creating $NXT_MAKEFILE"

mkdir -p $NXT_BUILD_DIR/src
mkdir -p $NXT_BUILD_DIR/test


cat << END > $NXT_MAKEFILE

# This file is auto-generated by configure

NXT_CC = ${CC}
NXT_CFLAGS = ${NXT_CFLAGS} ${CFLAGS}

default: $NXT_DEFAULT_TARGET
END


# The nxt include paths list.

$echo -n "NXT_LIB_INCS =" >> $NXT_MAKEFILE

for nxt_inc in nxt $NXT_BUILD_DIR
do
	$echo -n " -I $nxt_inc" >> $NXT_MAKEFILE
done

$echo >> $NXT_MAKEFILE
$echo >> $NXT_MAKEFILE


# The nxt object files list.

$echo "NXT_LIB_OBJS = \\" >> $NXT_MAKEFILE

for nxt_src in $NXT_LIB_SRCS
do
    fname=$(basename $nxt_src)
    nxt_obj="src/${fname%.c}.o"
    $echo "    $NXT_BUILD_DIR/$nxt_obj \\" >> $NXT_MAKEFILE
done

$echo >> $NXT_MAKEFILE


# The nxt static library.

cat << END >> $NXT_MAKEFILE

libnxt: $NXT_BUILD_DIR/libnxt.a

$NXT_BUILD_DIR/libnxt.a: \\
	$NXT_BUILD_DIR/nxt_auto_config.h \\
	\$(NXT_LIB_OBJS)
	ar -r -c $NXT_BUILD_DIR/libnxt.a \\
		\$(NXT_LIB_OBJS)

END


# The nxt object files.

for nxt_src in $NXT_LIB_SRCS
do
    fname=$(basename $nxt_src)
    nxt_obj="src/${fname%.c}.o"
    nxt_dep="src/${fname%.c}.dep"
    nxt_dep_flags=`nxt_gen_dep_flags $nxt_dep $nxt_obj`
    nxt_dep_post=`nxt_gen_dep_post $nxt_dep $nxt_obj`
    cat << END >> $NXT_MAKEFILE

$NXT_BUILD_DIR/$nxt_obj: $nxt_src
	\$(NXT_CC) -c \$(NXT_CFLAGS) $NXT_LIB_AUX_CFLAGS \\
		\$(NXT_LIB_INCS) -o $NXT_BUILD_DIR/$nxt_obj \\
		$nxt_dep_flags \\
		$nxt_src \\
		$nxt_dep_post

-include $NXT_BUILD_DIR/$nxt_dep

END

done

# nxt tests.

for nxt_src in $NXT_TEST_SRCS
do
    fname=$(basename $nxt_src)
    nxt_dep="test/${fname%.c}.dep"
    nxt_bin="${fname%.c}"
    nxt_dep_flags=`nxt_gen_dep_flags $nxt_dep $fname`
    nxt_dep_post=`nxt_gen_dep_post $nxt_dep $fname`
    cat << END >> $NXT_MAKEFILE

$NXT_BUILD_DIR/$nxt_bin: $nxt_src \\
	$NXT_BUILD_DIR/libnxt.a
	\$(NXT_CC) -o $NXT_BUILD_DIR/$nxt_bin \$(NXT_CFLAGS) \\
		\$(NXT_LIB_INCS) $nxt_dep_flags \\
		$nxt_src $NXT_BUILD_DIR/libnxt.a \\
		$nxt_dep_post

-include $NXT_BUILD_DIR/$nxt_dep

END

done

# The njs object files list.

$echo "NJS_LIB_OBJS = \\" >> $NXT_MAKEFILE

for njs_src in $NJS_LIB_SRCS
do
    fname=$(basename $njs_src)
    njs_obj="src/${fname%.c}.o"
    $echo "    $NXT_BUILD_DIR/$njs_obj \\" >> $NXT_MAKEFILE
done

$echo >> $NXT_MAKEFILE


# The njs static library.

cat << END >> $NXT_MAKEFILE

libnjs: $NXT_BUILD_DIR/libnjs.a

$NXT_BUILD_DIR/libnjs.a:   \\
	$NXT_BUILD_DIR/nxt_auto_config.h \\
	\$(NXT_LIB_OBJS) \\
	\$(NJS_LIB_OBJS)

	ar -r -c $NXT_BUILD_DIR/libnjs.a \\
		\$(NXT_LIB_OBJS) \\
		\$(NJS_LIB_OBJS)

END


# object files.

for njs_src in $NJS_LIB_SRCS
do
    fname=$(basename $njs_src)
    njs_obj="src/${fname%.c}.o"
    njs_dep="src/${fname%.c}.dep"
    njs_dep_flags=`nxt_gen_dep_flags $njs_dep $njs_obj`
    njs_dep_post=`nxt_gen_dep_post $njs_dep $njs_obj`
    cat << END >> $NXT_MAKEFILE

$NXT_BUILD_DIR/$njs_obj: $njs_src
	\$(NXT_CC) -c \$(NXT_CFLAGS) $NXT_LIB_AUX_CFLAGS \\
		\$(NXT_LIB_INCS) -Injs \\
		-o $NXT_BUILD_DIR/$njs_obj \\
		$njs_dep_flags \\
		$njs_src
		$njs_dep_post

-include $NXT_BUILD_DIR/$njs_dep

END

done

# njs cli.

cat << END >> $NXT_MAKEFILE

$NXT_BUILD_DIR/njs: \\
	$NXT_BUILD_DIR/libnxt.a \\
	$NXT_BUILD_DIR/libnjs.a \\
	njs/njs_shell.c
	\$(NXT_CC) -o $NXT_BUILD_DIR/njs \$(NXT_CFLAGS) \\
		$NXT_LIB_AUX_CFLAGS \$(NXT_LIB_INCS) \\
		$NXT_EDITLINE_CFLAGS -Injs \\
		njs/njs_shell.c \\
		$NXT_BUILD_DIR/libnjs.a \\
		-lm $NXT_LIBS $NXT_LIB_AUX_LIBS $NXT_EDITLINE_LIB

END

# njs tests.

for njs_src in $NJS_TEST_SRCS
do
    fname=$(basename $njs_src)
    njs_dep="test/${fname%.c}.dep"
    njs_bin="${fname%.c}"
    njs_dep_flags=`nxt_gen_dep_flags $njs_dep $fname`
    njs_dep_post=`nxt_gen_dep_post $njs_dep $fname`
    cat << END >> $NXT_MAKEFILE

$NXT_BUILD_DIR/$njs_bin: $njs_src \\
	$NXT_BUILD_DIR/libnxt.a \\
	$NXT_BUILD_DIR/libnjs.a
	\$(NXT_CC) -o $NXT_BUILD_DIR/$njs_bin \$(NXT_CFLAGS) \\
		$NXT_LIB_AUX_CFLAGS \$(NXT_LIB_INCS) \\
		$njs_dep_flags \\
		-Injs $njs_src $NXT_BUILD_DIR/libnjs.a \\
		-lm $NXT_LIBS $NXT_LIB_AUX_LIBS
		$njs_dep_post

-include $NXT_BUILD_DIR/$njs_dep

END

done

# main targets.

cat << END >> $NXT_MAKEFILE

$NXT_BUILD_DIR/nxt_auto_config.h:
	@echo
	@echo " Please run ./configure before make"
	@echo
	@exit 1

all: $NXT_BUILD_DIR/nxt_auto_config.h test lib_test benchmark

njs: $NXT_BUILD_DIR/nxt_auto_config.h $NXT_BUILD_DIR/njs

lib_test: $NXT_BUILD_DIR/nxt_auto_config.h \\
	$NXT_BUILD_DIR/random_unit_test \\
	$NXT_BUILD_DIR/rbtree_unit_test \\
	$NXT_BUILD_DIR/lvlhsh_unit_test \\
	$NXT_BUILD_DIR/utf8_unit_test

	$NXT_BUILD_DIR/random_unit_test
	$NXT_BUILD_DIR/rbtree_unit_test
	$NXT_BUILD_DIR/lvlhsh_unit_test
	$NXT_BUILD_DIR/utf8_unit_test

test: $NXT_BUILD_DIR/nxt_auto_config.h \\
	njs_expect_test \\
	$NXT_BUILD_DIR/njs_unit_test \\
	$NXT_BUILD_DIR/njs_interactive_test

	$NXT_BUILD_DIR/njs_unit_test
	$NXT_BUILD_DIR/njs_interactive_test

benchmark: $NXT_BUILD_DIR/nxt_auto_config.h \\
	$NXT_BUILD_DIR/njs_benchmark

	$NXT_BUILD_DIR/njs_benchmark v

dist:
	NJS_VER=`grep NJS_VERSION njs/njs.h | sed -e 's/.*"\(.*\)".*/\1/'`; \\
	rm -rf njs-\$\${NJS_VER} \\
	&& hg archive njs-\$\${NJS_VER}.tar.gz \\
		-p njs-\$\${NJS_VER} \\
		-X ".hg*" \\
	&& echo njs-\$\${NJS_VER}.tar.gz done
END


# Makefile.

cat << END > Makefile

# This file is auto-generated by configure

include $NXT_MAKEFILE

.PHONY: clean
clean:
	rm -rf $NXT_BUILD_DIR Makefile

END
