
# Copyright (C) Igor Sysoev
# Copyright (C) NGINX, Inc.


$echo checking for C compiler: $CC
cat << END >> $NXT_AUTOCONF_ERR
----------------------------------------
checking for C compiler: $CC
END


# Allow error exit status.
set +e

if [ -z `which $CC` ]; then
    $echo
    $echo $0: error: $CC not found.
    $echo
    exit 1;
fi


if `/bin/sh -c "($CC -v)" 2>&1 | grep "gcc version" >> $NXT_AUTOCONF_ERR 2>&1`
then
    NXT_CC_NAME=gcc
    $echo " + using GNU C compiler"
    NXT_CC_VERSION=`/bin/sh -c "($CC -v)" 2>&1 | grep "gcc version" 2>&1`
    $echo " + $NXT_CC_VERSION"

else
if `/bin/sh -c "($CC -v)" 2>&1 | grep "clang version" >> $NXT_AUTOCONF_ERR 2>&1`
then
    NXT_CC_NAME=clang
    $echo " + using Clang C compiler"
    NXT_CC_VERSION=`/bin/sh -c "($CC -v)" 2>&1 | grep "clang version" 2>&1`
    $echo " + $NXT_CC_VERSION"

else
if `/bin/sh -c "($CC -v)" 2>&1 \
                 | grep "Apple LLVM version" >> $NXT_AUTOCONF_ERR 2>&1`
then
    NXT_CC_NAME=clang
    $echo " + using Clang C compiler"
    NXT_CC_VERSION=`/bin/sh -c "($CC -v)" 2>&1 | grep "Apple LLVM version" 2>&1`
    $echo " + $NXT_CC_VERSION"

else
if `/bin/sh -c "($CC -V)" 2>&1 | grep "Sun C" >> $NXT_AUTOCONF_ERR 2>&1`
then
    NXT_CC_NAME=SunC
    $echo " + using Sun C compiler"
    NXT_CC_VERSION=`/bin/sh -c "($CC -V)" 2>&1 | grep "Sun C" 2>&1`
    $echo " + $NXT_CC_VERSION"

fi # SunC
fi # Apple LLVM clang
fi # clang
fi # gcc


case $NXT_CC_NAME in

    gcc)
        nxt_define=NXT_GCC . auto/define

        NXT_CFLAGS="$NXT_CFLAGS -pipe"
        NXT_CFLAGS="$NXT_CFLAGS -fPIC"

        # Do not export symbols except explicitly marked with NXT_EXPORT.
        NXT_CFLAGS="$NXT_CFLAGS -fvisibility=hidden"

        # c99/gnu99 conflict with Solaris XOPEN.
        #NXT_CFLAGS="$NXT_CFLAGS -std=gnu99"

        NXT_CFLAGS="$NXT_CFLAGS -O"
        #NXT_CFLAGS="$NXT_CFLAGS -O0"
        NXT_CFLAGS="$NXT_CFLAGS -W -Wall -Wextra"

        #NXT_CFLAGS="$NXT_CFLAGS -Wunused-result"
        NXT_CFLAGS="$NXT_CFLAGS -Wno-unused-parameter"
        #NXT_CFLAGS="$NXT_CFLAGS -Wshorten-64-to-32"
        NXT_CFLAGS="$NXT_CFLAGS -Wwrite-strings"

        # -O2 enables -fstrict-aliasing and -fstrict-overflow.
        #NXT_CFLAGS="$NXT_CFLAGS -O2"
        #NXT_CFLAGS="$NXT_CFLAGS -Wno-strict-aliasing"

        #NXT_CFLAGS="$NXT_CFLAGS -fomit-frame-pointer"
        #NXT_CFLAGS="$NXT_CFLAGS -momit-leaf-frame-pointer"

        # -Wstrict-overflow is supported by GCC 4.2+.
        #NXT_CFLAGS="$NXT_CFLAGS -Wstrict-overflow=5"

        NXT_CFLAGS="$NXT_CFLAGS -Wmissing-prototypes"

        # Stop on warning.
        NXT_CFLAGS="$NXT_CFLAGS -Werror"

        # Debug.
        NXT_CFLAGS="$NXT_CFLAGS -g"
    ;;

    clang)
        nxt_define=NXT_CLANG . auto/define

        NXT_CFLAGS="$NXT_CFLAGS -pipe"
        NXT_CFLAGS="$NXT_CFLAGS -fPIC"

        # Do not export symbols except explicitly marked with NXT_EXPORT.
        NXT_CFLAGS="$NXT_CFLAGS -fvisibility=hidden"

        NXT_CFLAGS="$NXT_CFLAGS -O"
        #NXT_CFLAGS="$NXT_CFLAGS -O0"
        NXT_CFLAGS="$NXT_CFLAGS -W -Wall -Wextra"

        #NXT_CFLAGS="$NXT_CFLAGS -Wunused-result"
        NXT_CFLAGS="$NXT_CFLAGS -Wno-unused-parameter"
        #NXT_CFLAGS="$NXT_CFLAGS -Wshorten-64-to-32"
        NXT_CFLAGS="$NXT_CFLAGS -Wwrite-strings"
        #NXT_CFLAGS="$NXT_CFLAGS -O2"
        #NXT_CFLAGS="$NXT_CFLAGS -fomit-frame-pointer"
        NXT_CFLAGS="$NXT_CFLAGS -fstrict-aliasing"
        NXT_CFLAGS="$NXT_CFLAGS -Wstrict-overflow=5"

        NXT_CFLAGS="$NXT_CFLAGS -Wmissing-prototypes"

        # Stop on warning.
        NXT_CFLAGS="$NXT_CFLAGS -Werror"

        # Debug.

        if [ "$NXT_SYSTEM_PLATFORM" != "powerpc" ]; then
            # "-g" flag causes the "unknown pseudo-op: `.cfi_sections'"
            # error on PowerPC Clang.
            NXT_CFLAGS="$NXT_CFLAGS -g"
        fi
    ;;

    SunC)
        nxt_define=NXT_SUNC . auto/define

        NXT_CFLAGS="$NXT_CFLAGS -fPIC"
        # Optimization.
        NXT_CFLAGS="$NXT_CFLAGS -O -fast"
        # Stop on warning.
        NXT_CFLAGS="$NXT_CFLAGS -errwarn=%all"
        # Debug.
        NXT_CFLAGS="$NXT_CFLAGS -g"
    ;;

    *)
    ;;

esac

# Stop on error exit status again.
set -e

cat << END >> $NXT_MAKEFILE

NXT_CC =	${CC}
NXT_CFLAGS =	${NXT_CFLAGS} ${CFLAGS}
END


# C language features.

nxt_feature="GCC unsigned __int128"
nxt_feature_name=NXT_HAVE_UNSIGNED_INT128
nxt_feature_run=no
nxt_feature_incs=
nxt_feature_libs=
nxt_feature_test="int main(void) {
                      unsigned __int128 p = 0;
                      return (int) p;
                  }"
. auto/feature


nxt_feature="GCC __builtin_expect()"
nxt_feature_name=NXT_HAVE_BUILTIN_EXPECT
nxt_feature_run=no
nxt_feature_incs=
nxt_feature_libs=
nxt_feature_test="int main(int argc, char *const *argv) {
                      if ((__typeof__(argc == 0))
                                   __builtin_expect((argc == 0), 0))
                          return 0;
                      return 1;
                  }"
. auto/feature


nxt_feature="GCC __builtin_unreachable()"
nxt_feature_name=NXT_HAVE_BUILTIN_UNREACHABLE
nxt_feature_run=no
nxt_feature_incs=
nxt_feature_libs=
nxt_feature_test="int main(void) {
                      __builtin_unreachable();
                  }"
. auto/feature


nxt_feature="GCC __builtin_prefetch()"
nxt_feature_name=NXT_HAVE_BUILTIN_PREFETCH
nxt_feature_run=no
nxt_feature_incs=
nxt_feature_libs=
nxt_feature_test="int main(void) {
                      __builtin_prefetch(0);
                      return 0;
                  }"
. auto/feature


nxt_feature="GCC __builtin_clz()"
nxt_feature_name=NXT_HAVE_BUILTIN_CLZ
nxt_feature_run=no
nxt_feature_incs=
nxt_feature_libs=
nxt_feature_test="int main(void) {
                      if (__builtin_clz(1) != 31) {
                          return 1;
                      }
                      return 0;
                  }"
. auto/feature


nxt_feature="GCC __builtin_clzll()"
nxt_feature_name=NXT_HAVE_BUILTIN_CLZLL
nxt_feature_run=no
nxt_feature_incs=
nxt_feature_libs=
nxt_feature_test="int main(void) {
                      if (__builtin_clzll(1ULL) != 63) {
                          return 1;
                      }
                      return 0;
                  }"
. auto/feature


nxt_feature="GCC __attribute__ visibility"
nxt_feature_name=NXT_HAVE_GCC_ATTRIBUTE_VISIBILITY
nxt_feature_run=no
nxt_feature_path=
nxt_feature_libs=
nxt_feature_test="int n __attribute__ ((visibility(\"default\")));

                  int main(void) {
                      return 0;
                  }"
. auto/feature


nxt_feature="GCC __attribute__ malloc"
nxt_feature_name=NXT_HAVE_GCC_ATTRIBUTE_MALLOC
nxt_feature_run=no
nxt_feature_path=
nxt_feature_libs=
nxt_feature_test="#include <stdlib.h>

                  void *f(void) __attribute__ ((__malloc__));

                  void *f(void) {
                      return malloc(1);
                  }

                  int main(void) {
                      if (f() != NULL) {
                          return 1;
                      }
                      return 0;
                  }"
. auto/feature


nxt_os="$NXT_SYSTEM/$NXT_SYSTEM_PLATFORM"

if [ "$nxt_os" = "Linux/ppc64le" ]; then

    # Old GNU ld linker may hang on Linux ppc64le platform
    # if some of these features are enabled.

    echo "checking for GCC __attribute__ aligned is disabled for $nxt_os."

else

    nxt_feature="GCC __attribute__ aligned"
    nxt_feature_name=NXT_HAVE_GCC_ATTRIBUTE_ALIGNED
    nxt_feature_run=no
    nxt_feature_path=
    nxt_feature_libs=
    nxt_feature_test="int n __attribute__ ((aligned(64)));

                      int main(void) {
                          return 0;
                      }"
    . auto/feature

fi


nxt_feature="NAN to uint conversion"
nxt_feature_name=NXT_NAN_TO_UINT_CONVERSION
nxt_feature_run=value
nxt_feature_incs=
nxt_feature_libs=-lm
nxt_feature_test="#include <math.h>
                  #include <stdio.h>
                  #include <stdint.h>

                  int main(void) {
                      int64_t  i64 = acosh(0);
                      printf(\"%x\", (uint32_t) i64);
                      return 0;
                  }"
. auto/feature
